import { type NextRequest, NextResponse } from "next/server"

export async function GET() {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  const chatId = process.env.TELEGRAM_CHAT_ID

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const config = {
    telegram_bot_token_exists: !!botToken,
    telegram_chat_id_exists: !!chatId,
    bot_token_format: botToken ? botToken.includes(":") : false,
    chat_id_format: chatId ? !isNaN(Number(chatId)) || chatId.startsWith("@") : false,
  }

  if (!botToken || !chatId) {
    return NextResponse.json({
      status: "error",
      message: "Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
      config,
      instructions: {
        step1: "–°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather",
        step2: "–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞",
        step3: "–ü–æ–ª—É—á–∏—Ç–µ Chat ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
        step4: "–î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ Vercel Environment Variables",
        step5: "–°–¥–µ–ª–∞–π—Ç–µ Redeploy –ø—Ä–æ–µ–∫—Ç–∞",
      },
    })
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
  try {
    const testMessage = `üß™ <b>–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OtelShin</b>

‚úÖ Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!
üìÖ –í—Ä–µ–º—è —Ç–µ—Å—Ç–∞: ${new Date().toLocaleString("ru-RU")}

üöó –¢–µ–ø–µ—Ä—å –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

<i>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.</i>`

    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: testMessage,
        parse_mode: "HTML",
      }),
    })

    const result = await response.json()

    if (result.ok) {
      return NextResponse.json({
        status: "success",
        message: "Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.",
        config,
        telegram_response: result,
      })
    } else {
      return NextResponse.json({
        status: "error",
        message: "–û—à–∏–±–∫–∞ Telegram API",
        config,
        telegram_error: result,
        possible_solutions: {
          unauthorized: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞",
          chat_not_found: "–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É /start",
          bot_blocked: "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram",
        },
      })
    }
  } catch (error) {
    return NextResponse.json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Telegram",
      config,
      error: error instanceof Error ? error.message : "Unknown error",
    })
  }
}

export async function POST(request: NextRequest) {
  try {
    const { test_name, test_phone } = await request.json()

    const testOrder = {
      name: test_name || "–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤–∏—á",
      phone: test_phone || "+7 (999) 123-45-67",
      tariff: {
        name: "R16-R19",
        price: "600",
        description: "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ API",
      },
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const response = await fetch(`${request.nextUrl.origin}/api/send-order`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(testOrder),
    })

    const result = await response.json()

    return NextResponse.json({
      status: response.ok ? "success" : "error",
      message: response.ok ? "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞" : "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏",
      test_data: testOrder,
      api_response: result,
    })
  } catch (error) {
    return NextResponse.json({
      status: "error",
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏",
      error: error instanceof Error ? error.message : "Unknown error",
    })
  }
}
