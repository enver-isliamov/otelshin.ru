import { type NextRequest, NextResponse } from "next/server"

export async function POST(request: NextRequest) {
  try {
    const { name, phone, telegram, tariff } = await request.json()

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!name || !phone || !tariff) {
      return NextResponse.json({ error: "–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã" }, { status: 400 })
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram credentials
    const botToken = process.env.TELEGRAM_BOT_TOKEN
    const chatId = process.env.TELEGRAM_CHAT_ID

    if (!botToken || !chatId) {
      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      console.log("üìã –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê (Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω):", {
        name,
        phone,
        telegram: telegram || "–Ω–µ —É–∫–∞–∑–∞–Ω",
        tariff,
        timestamp: new Date().toISOString(),
      })

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, –Ω–æ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
      return NextResponse.json({
        success: true,
        message: "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        warning: "telegram_not_configured",
      })
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    const telegramResult = await sendToTelegram({
      name,
      phone,
      telegram,
      tariff,
      botToken,
      chatId,
    })

    if (telegramResult.success) {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞—è–≤–∫–∏
      console.log("‚úÖ Order sent successfully:", {
        name,
        phone,
        telegram: telegram || "–Ω–µ —É–∫–∞–∑–∞–Ω",
        tariff: tariff.name,
        timestamp: new Date().toISOString(),
      })

      return NextResponse.json({
        success: true,
        message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
      })
    } else {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      console.error("‚ùå Telegram send failed:", telegramResult.error)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –ª–æ–≥–∞—Ö –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      console.log("üìã –ó–ê–Ø–í–ö–ê –î–õ–Ø –†–£–ß–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–ò:", {
        name,
        phone,
        telegram: telegram || "–Ω–µ —É–∫–∞–∑–∞–Ω",
        tariff,
        timestamp: new Date().toISOString(),
        error: telegramResult.error,
      })

      return NextResponse.json({
        success: true,
        message: "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –µ—ë –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        warning: "telegram_send_failed",
      })
    }
  } catch (error) {
    console.error("‚ùå Order API error:", error)

    return NextResponse.json(
      {
        error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –Ω–∞–ø—Ä—è–º—É—é: +7 (978) 070-36-65",
      },
      { status: 500 },
    )
  }
}

async function sendToTelegram({
  name,
  phone,
  telegram,
  tariff,
  botToken,
  chatId,
}: {
  name: string
  phone: string
  telegram?: string
  tariff: { name: string; price: string; description: string }
  botToken: string
  chatId: string
}): Promise<{ success: boolean; error?: string }> {
  const telegramInfo = telegram ? `üì± <b>Telegram:</b> ${telegram}` : `üì± <b>Telegram:</b> <i>–Ω–µ —É–∫–∞–∑–∞–Ω</i>`

  const message = `üöó <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ OtelShin</b>

üìã <b>–¢–∞—Ä–∏—Ñ:</b> ${tariff.name}
üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${tariff.price}‚ÇΩ/–º–µ—Å—è—Ü
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${tariff.description}

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <a href="tel:${phone.replace(/\D/g, "")}">${phone}</a>
${telegramInfo}

‚è∞ <b>–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏:</b> ${new Date().toLocaleString("ru-RU")}
üåê <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> –°–∞–π—Ç OtelShin

<i>–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!</i>`

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: "HTML",
        disable_web_page_preview: true,
      }),
    })

    const result = await response.json()

    if (result.ok) {
      console.log("‚úÖ Message sent to Telegram successfully")
      return { success: true }
    } else {
      console.error("‚ùå Telegram API error:", result)
      return {
        success: false,
        error: `Telegram API error: ${result.description || "Unknown error"}`,
      }
    }
  } catch (error) {
    console.error("‚ùå Network error sending to Telegram:", error)
    return {
      success: false,
      error: `Network error: ${error instanceof Error ? error.message : "Unknown error"}`,
    }
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º GET endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
export async function GET() {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  const chatId = process.env.TELEGRAM_CHAT_ID

  return NextResponse.json({
    status: "OtelShin Order API is running",
    telegram_configured: !!(botToken && chatId),
    timestamp: new Date().toISOString(),
  })
}
